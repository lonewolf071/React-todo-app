{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Todo","todo","index","markCompleteTask","removeTask","className","style","textDecoration","isCompleted","name","onClick","TaskInput","addTask","React","useState","value","setValue","onSubmit","event","preventDefault","type","placeholder","onChange","target","App","taskList","setList","newTodos","splice","id","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4LAEA,SAASA,EAAT,GAA8D,IAA9CC,EAA6C,EAA7CA,KAAMC,EAAuC,EAAvCA,MAAOC,EAAgC,EAAhCA,iBAAkBC,EAAc,EAAdA,WAG7C,OACE,sBAAKC,UAAU,OAAOC,MAAO,CAAEC,eAAgBN,EAAKO,YAAc,eAAiB,IAAnF,UACGN,EAAM,EADT,IACaD,EAAKQ,KADlB,KAEE,gCACE,wBAAQJ,UAAY,SAASK,QAAS,kBAAMP,EAAiBD,IAA7D,kBACA,wBAAQG,UAAY,UAAUK,QAAS,kBAAMN,EAAWF,IAAxD,yBAMR,SAASS,EAAT,GAAiC,IAAZC,EAAW,EAAXA,QAGnB,EAA0BC,IAAMC,SAAS,IAAzC,mBAAOC,EAAP,KAAcC,EAAd,KAiBA,OACE,8BACE,uBAAMX,UAAU,OAAOY,SAjBR,SAACC,GAIlBA,EAAMC,iBAEQ,KAAVJ,IAEJH,EAAQG,GAERC,EAAS,MAOP,iBAEE,uBACEI,KAAK,OACLC,YAAc,iBACdN,MAAOA,EACPO,SAAU,SAACJ,GAAD,OAAWF,EAASE,EAAMK,OAAOR,eA2DtCS,MAnDf,WAEE,MAA4BX,IAAMC,SAAS,CAAC,CAACL,KAAK,oBAAqBD,aAAa,KAApF,mBAAOiB,EAAP,KAAiBC,EAAjB,KAWMvB,EAAmB,SAACD,GAExB,IAAMyB,EAAQ,YAAOF,GAErBE,EAASzB,GAAOM,aAAc,EAE9BkB,EAAQC,IAGJvB,EAAa,SAACF,GAElB,IAAMyB,EAAQ,YAAOF,GAErBE,EAASC,OAAO1B,EAAO,GAEvBwB,EAAQC,IAGV,OACE,sBAAKtB,UAAU,MAAf,UACI,qBAAKwB,GAAG,UAAR,4BACA,sBAAKxB,UAAU,OAAf,UACGoB,EAASK,KAAI,SAAC7B,EAAMC,GAAP,OACZ,cAACF,EAAD,CAEEE,MAAOA,EACPD,KAAMA,EACNE,iBAAkBA,EAClBC,WAAYA,GAJPF,MAHX,QAWA,cAACS,EAAD,CAAWC,QAvCD,SAACH,GAIfiB,EAAQ,GAAD,mBAAKD,GAAL,CAAe,CAAEhB,OAAMD,aAAa,SAwBvC,WC1EOuB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.882bd313.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Todo({ todo, index, markCompleteTask, removeTask }) {\n  // this is the component which can be many in number and each of these components can handle a task\n\n  return (\n    <div className=\"task\" style={{ textDecoration: todo.isCompleted ? \"line-through\" : \"\" }}>\n      {index+1}.{todo.name}  {/*This is where the task name appears*/}\n      <div>\n        <button className = \"button\" onClick={() => markCompleteTask(index)}>Done</button>\n        <button className = \"button2\" onClick={() => removeTask(index)}>Clear</button>\n      </div>\n    </div>\n  );\n}\n\nfunction TaskInput({ addTask }) {\n  //TodoForm is a functional component which works with entered tasks as input strings and add them into the list using addTodo func\n\n  const [value, setValue] = React.useState(\"\");// here we define a state which stores the strings entered and submitted in the form\n\n  const takeSubmit = (event) => {\n\n    //Here we define a function which decides what happens on submitting the task name in the form\n\n    event.preventDefault();// This will prevent the default event so that we can define our own event which happens on submitting\n\n    if (value === \"\") return;// The page remains as it is on submitting an empty string\n\n    addTask(value);// this function will now add the entered task into the array and will be displayed in the list\n\n    setValue(\"\");\n    // this line of code will now change the stored string to an empty string\n    // to prevent interference with the strings added in future  \n  };\n\n  return (\n    <div>\n      <form className=\"form\" onSubmit={takeSubmit}>    {/*The form which calls the handleSubmit function on submitting*/}\n\n        <input\n          type=\"text\"\n          placeholder = \"enter new task\"\n          value={value}\n          onChange={(event) => setValue(event.target.value)}\n        />\n      </form>\n      \n    </div>\n  );\n}\n\nfunction App() {\n\n  const [taskList, setList] = React.useState([{name:'Play with the app', isCompleted: false}]);// initialize the array of to do activities\n  // todos is an array of various states which we are taking as tasks\n  // each task state can have two properties, isCompleted (true or false) and text which is the task name\n\n  const addTask = (name) => {\n\n    // Here we are defining a new function called addTodo which will add new tasks to the existing todos array\n\n    setList([...taskList, { name, isCompleted: false}]); //this line of code adds a new task to the todos array\n  }; \n\n  const markCompleteTask = (index) => {\n\n    const newTodos = [...taskList]; // here we are assigning the todos array to newTodos also\n\n    newTodos[index].isCompleted = true; // select the task by its index and mark it as completed\n\n    setList(newTodos); // then update with the updated newTodos array\n  };\n\n  const removeTask = (index) => {\n\n    const newTodos = [...taskList]; // here also we are assigning the todos array to newTodos also\n\n    newTodos.splice(index, 1); // splice function removes ONE element from the assgined index position\n\n    setList(newTodos); // update the todos array with the new newTodos array\n  };\n\n  return(\n    <div className=\"app\">\n        <div id=\"Heading\">React Todo App</div>\n        <div className=\"list\">\n          {taskList.map((todo, index) => (\n            <Todo\n              key={index}\n              index={index}\n              todo={todo}\n              markCompleteTask={markCompleteTask}\n              removeTask={removeTask}\n            />\n          ))}     {/* The Todo component is rendered here */}\n\n        <TaskInput addTask={addTask} /> {/* The form appears below all the todo components */}\n      </div>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}